#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define BLOCK_SIZE 64
#define KEY_SIZE 64
#define SUBKEY_SIZE 48
#define NUM_ROUNDS 16

// Initial permutation table
int IP[] = { 
    58, 50, 42, 34, 26, 18, 10, 2, 
    60, 52, 44, 36, 28, 20, 12, 4, 
    62, 54, 46, 38, 30, 22, 14, 6, 
    64, 56, 48, 40, 32, 24, 16, 8, 
    57, 49, 41, 33, 25, 17, 9, 1, 
    59, 51, 43, 35, 27, 19, 11, 3, 
    61, 53, 45, 37, 29, 21, 13, 5, 
    63, 55, 47, 39, 31, 23, 15, 7 
};

// Final permutation table
int FP[] = { 
    40, 8, 48, 16, 56, 24, 64, 32, 
    39, 7, 47, 15, 55, 23, 63, 31, 
    38, 6, 46, 14, 54, 22, 62, 30, 
    37, 5, 45, 13, 53, 21, 61, 29, 
    36, 4, 44, 12, 52, 20, 60, 28, 
    35, 3, 43, 11, 51, 19, 59, 27, 
    34, 2, 42, 10, 50, 18, 58, 26, 
    33, 1, 41, 9, 49, 17, 57, 25 
};

// Expansion table for the right half
int E[] = { 
    32, 1, 2, 3, 4, 5, 4, 5, 
    6, 7, 8, 9, 8, 9, 10, 11, 
    12, 13, 12, 13, 14, 15, 16, 17, 
    16, 17, 18, 19, 20, 21, 20, 21, 
    22, 23, 24, 25, 24, 25, 26, 27, 
    28, 29, 28, 29, 30, 31, 32, 1 
};

// Permutation P
int P[] = { 
    16, 7, 20, 21, 
    29, 12, 28, 17, 
    1, 15, 23, 26, 
    5, 18, 31, 10, 
    2, 8, 24, 14, 
    32, 27, 3, 9, 
    19, 13, 30, 6, 
    22, 11, 4, 25 
};

// S-boxes
int S[8][4][16] = {
    {
        { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 },
        { 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8 },
        { 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0 },
        { 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 }
    },
    {
        { 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10 },
        { 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5 },
        { 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15 },
        { 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 }
    },
    {
        { 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8 },
        { 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1 },
        { 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7 },
        { 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 }
    },
    {
        { 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15 },
        { 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9 },
        { 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4 },
        { 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 }
    },
    {
        { 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9 },
        { 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6 },
        { 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14 },
        { 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 }
    },
    {
        { 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11 },
        { 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8 },
        { 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6 },
        { 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 }
    },
    {
        { 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1 },
        { 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6 },
        { 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2 },
        { 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 }
    },
    {
        { 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7 },
        { 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 },
        { 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 },
        { 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 }
    }
};

// Key schedule tables
int PC1[] = {
    57, 49, 41, 33, 25, 17, 9,
    1,  58, 50, 42, 34, 26, 18,
    10, 2,  59, 51, 43, 35, 27,
    19, 11, 3,  60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
    7,  62, 54, 46, 38, 30, 22,
    14, 6,  61, 53, 45, 37, 29,
    21, 13, 5,  28, 20, 12, 4
};

int PC2[] = {
    14, 17, 11, 24, 1,  5,
    3,  28, 15, 6,  21, 10,
    23, 19, 12, 4,  26, 8,
    16, 7,  27, 20, 13, 2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
};

int SHIFTS[] = { 
    1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 
};

void initial_permutation(uint8_t* block, uint8_t* output) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
        int pos = IP[i] - 1;
        int byte_pos = pos / 8;
        int bit_pos = pos % 8;
        output[i / 8] = (output[i / 8] << 1) | ((block[byte_pos] >> (7 - bit_pos)) & 1);
    }
}

void final_permutation(uint8_t* block, uint8_t* output) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
        int pos = FP[i] - 1;
        int byte_pos = pos / 8;
        int bit_pos = pos % 8;
        output[i / 8] = (output[i / 8] << 1) | ((block[byte_pos] >> (7 - bit_pos)) & 1);
    }
}

void expand_half_block(uint32_t half_block, uint8_t* output) {
    for (int i = 0; i < SUBKEY_SIZE; i++) {
        int pos = E[i] - 1;
        int byte_pos = pos / 8;
        int bit_pos = pos % 8;
        output[i / 8] = (output[i / 8] << 1) | ((half_block >> (31 - pos)) & 1);
    }
}

uint32_t permute_p(uint32_t input) {
    uint32_t output = 0;
    for (int i = 0; i < 32; i++) {
        int pos = P[i] - 1;
        output = (output << 1) | ((input >> (31 - pos)) & 1);
    }
    return output;
}

uint32_t sbox_substitution(uint8_t* input) {
    uint32_t output = 0;
    for (int i = 0; i < 8; i++) {
        int row = ((input[i] >> 6) & 0x02) | (input[i] & 0x01);
        int col = (input[i] >> 1) & 0x0F;
        output = (output << 4) | S[i][row][col];
    }
    return output;
}

void generate_subkeys(uint8_t* key, uint8_t subkeys[NUM_ROUNDS][6]) {
    uint8_t permuted_choice1[7] = {0};
    uint8_t permuted_choice2[6] = {0};

    for (int i = 0; i < 56; i++) {
        int pos = PC1[i] - 1;
        int byte_pos = pos / 8;
        int bit_pos = pos % 8;
        permuted_choice1[i / 8] = (permuted_choice1[i / 8] << 1) | ((key[byte_pos] >> (7 - bit_pos)) & 1);
    }

    uint32_t c = (permuted_choice1[0] << 20) | (permuted_choice1[1] << 12) | (permuted_choice1[2] << 4) | (permuted_choice1[3] >> 4);
    uint32_t d = ((permuted_choice1[3] & 0x0F) << 24) | (permuted_choice1[4] << 16) | (permuted_choice1[5] << 8) | permuted_choice1[6];

    for (int i = 0; i < NUM_ROUNDS; i++) {
        c = ((c << SHIFTS[i]) | (c >> (28 - SHIFTS[i]))) & 0x0FFFFFFF;
        d = ((d << SHIFTS[i]) | (d >> (28 - SHIFTS[i]))) & 0x0FFFFFFF;

        uint64_t cd = ((uint64_t)c << 28) | d;

        for (int j = 0; j < 48; j++) {
            int pos = PC2[j] - 1;
            int bit = (cd >> (55 - pos)) & 1;
            subkeys[i][j / 8] = (subkeys[i][j / 8] << 1) | bit;
        }
    }
}

uint32_t des_round(uint32_t right, uint8_t* subkey) {
    uint8_t expanded_right[6] = {0};
    expand_half_block(right, expanded_right);

    for (int i = 0; i < 6; i++) {
        expanded_right[i] ^= subkey[i];
    }

    uint32_t sbox_output = sbox_substitution(expanded_right);
    return permute_p(sbox_output);
}

void des_decrypt(uint8_t* ciphertext, uint8_t* key, uint8_t* plaintext) {
    uint8_t initial_permutation_output[8] = {0};
    initial_permutation(ciphertext, initial_permutation_output);

    uint32_t left = (initial_permutation_output[0] << 24) | (initial_permutation_output[1] << 16) | (initial_permutation_output[2] << 8) | initial_permutation_output[3];
    uint32_t right = (initial_permutation_output[4] << 24) | (initial_permutation_output[5] << 16) | (initial_permutation_output[6] << 8) | initial_permutation_output[7];

    uint8_t subkeys[NUM_ROUNDS][6] = {0};
    generate_subkeys(key, subkeys);

    for (int i = NUM_ROUNDS - 1; i >= 0; i--) {
        uint32_t temp = right;
        right = left ^ des_round(right, subkeys[i]);
        left = temp;
    }

    uint8_t pre_output[8] = {0};
    pre_output[0] = right >> 24;
    pre_output[1] = right >> 16;
    pre_output[2] = right >> 8;
    pre_output[3] = right;
    pre_output[4] = left >> 24;
    pre_output[5] = left >> 16;
    pre_output[6] = left >> 8;
    pre_output[7] = left;

    final_permutation(pre_output, plaintext);
}

int main() {
    uint8_t ciphertext[8] = { 0x39, 0x25, 0x84, 0x1D, 0x02, 0xDC, 0x09, 0xFB };
    uint8_t key[8] = { 0x13, 0x34, 0x57, 0x79, 0x9B, 0xBC, 0xDF, 0xF1 };
    uint8_t plaintext[8] = {0};

    des_decrypt(ciphertext, key, plaintext);

    printf("Decrypted plaintext: ");
    for (int i = 0; i < 8; i++) {
        printf("%02X ", plaintext[i]);
    }
    printf("\n");

    return 0;
}
OUTPUT:
Decrypted plaintext: 71 B0 75 CF E6 34 A2 AE
