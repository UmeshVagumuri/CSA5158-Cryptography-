
#include <stdio.h>

// Function to calculate gcd and apply extended Euclidean algorithm
int extended_gcd(int a, int b, int *x, int *y) {
    if (a == 0) {
        *x = 0;
        *y = 1;
        return b;
    }
    int x1, y1;
    int gcd = extended_gcd(b % a, a, &x1, &y1);
    *x = y1 - (b / a) * x1;
    *y = x1;
    return gcd;
}

// Function to calculate modular inverse
int mod_inverse(int a, int m) {
    int x, y;
    int gcd = extended_gcd(a, m, &x, &y);
    if (gcd != 1) {
        printf("Inverse does not exist\n");
        return -1;
    } else {
        return (x % m + m) % m;
    }
}

int main() {
    int e = 31;
    int n = 3599;
    int phi_n = 3480; // phi(3599) = 3480
    
    // Calculate the private key d
    int d = mod_inverse(e, phi_n);
    
    printf("Private key d = %d\n", d);
    
    return 0;
}
OUTPUT:
Private key d = 3031
