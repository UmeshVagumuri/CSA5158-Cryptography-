
#include <stdio.h>
#include <stdlib.h>

// Function to compute gcd using Euclidean algorithm
int gcd(int a, int b),g {
    while (b != 0) {
        temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to compute modular inverse using extended Euclidean algorithm
int mod_inverse(int e, int phi) {
    int d, x, y;
    if (g != 1) {
        printf("Inverse does not exist\n");
        exit(1);
    } else {
        // Ensure d is positive
        d = x % phi;
        if (d < 0) {
            d += phi;
        }
    }
    return d;
}

// Extended Euclidean algorithm to compute gcd and coefficients
int extended_gcd(int a, int b, int *x, int *y) {
    if (a == 0) {
        *x = 0;
        *y = 1;
        return b;
    }
    int x1, y1;
    int gcd = extended_gcd(b % a, a, &x1, &y1);
    *x = y1 - (b / a) * x1;
    *y = x1;
    return gcd;
}

int main() {
    int n = 3599; // Replace with actual value of n
    int e = 31;   // Replace with actual value of e
    int g = 59;   // Assume g is a known common factor with n
    
    // Calculate p and q
    int p = n / g;
    int q = g;
    
    // Calculate phi(n)
    int phi = (p - 1) * (q - 1);
    
    // Calculate private key d
    int d = mod_inverse(e, phi);
    
    printf("Private key d = %d\n", d);
    
    return 0;
}
