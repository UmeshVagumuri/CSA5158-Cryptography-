
 #include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to encrypt the plaintext using the polyalphabetic substitution cipher
void encrypt(const char* plaintext, const char* key, char* ciphertext) {
    int keyLen = strlen(key);
    int textLen = strlen(plaintext);
    int i, j;

    for (i = 0, j = 0; i < textLen; ++i) {
        if (isalpha(plaintext[i])) {
            // Determine the shift for this character based on the key
            int shift = toupper(key[j % keyLen]) - 'A';
            
            if (isupper(plaintext[i])) {
                ciphertext[i] = ((plaintext[i] - 'A' + shift) % 26) + 'A';
            } else {
                ciphertext[i] = ((plaintext[i] - 'a' + shift) % 26) + 'a';
            }
            
            j++; // Move to the next letter in the key
        } else {
            ciphertext[i] = plaintext[i]; // Non-alphabetic characters are unchanged
        }
    }
    ciphertext[textLen] = '\0'; // Null-terminate the ciphertext
}

int main() {
    char plaintext[1000], key[100], ciphertext[1000];

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0'; // Remove the newline character

    printf("Enter the key: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0'; // Remove the newline character

    encrypt(plaintext, key, ciphertext);

    printf("Encrypted text: %s\n", ciphertext);

    return 0;
}
OUTPUT:
Enter the plaintext: principal
Enter the key: 2
Encrypted text: acZ_TZaR]
